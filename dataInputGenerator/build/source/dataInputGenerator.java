import processing.core.*; 
import processing.data.*; 
import processing.event.*; 
import processing.opengl.*; 

import lemma.library.Event; 
import lemma.library.EventHandler; 
import lemma.library.Lemma; 

import java.util.HashMap; 
import java.util.ArrayList; 
import java.io.File; 
import java.io.BufferedReader; 
import java.io.PrintWriter; 
import java.io.InputStream; 
import java.io.OutputStream; 
import java.io.IOException; 

public class dataInputGenerator extends PApplet {

/*
This sketch provides an interface for generating sample data to test an input controller
 I have also shown an example of how you might use simple timer implementations to generate periodic signals
 Test data is generated by simply randomly modifying variables (don't use this method to generate outputs for your sextronic worholes!) 
 */





//Variables to store data.  
//Application updates these variables, and timers will send the periodic signals out on a regular schedule

String guestName = "InputDataGenerator"; //The name of the guest in the Noam room
String roomName = "NoamNoam";  //The name of the room the guest will join.  Leave blank for free agent

//Noam topic names for our input messages
String MoodRingTopicName = "Input_MoodRing_";
String SpiritCenterTopicName = "Input_SpiritCenter_";
String ExtremelyImportantTopicName = "Input_ExtremelyImportant_1";
String EmotionalQuotientTopicName = "Input_EmotionalQuotient_";
String BrainwaveTopicName = "Input_Brainwave_";
Lemma lemma;

int[] moodRingData = new int[10];  //Array of colors to store values from MoodRing
float[] spiritCenterData = new float[3];  //Array of floats to store values from SpritCenter messages
int extremelyImportantEventCounter = 0;  //value that counts the extremely important events
float emotionalQuotientData = 0.0f;  //value to store data from EmotionalQuotient messages
String brainwaveData = "";  //string to store data from brainwave messages

// for sending periodic data, create a timer variable
// millis() returns the number of milliseconds since the program has started
long noamTimer200 = millis(); //our 'timer' variable for sending at 200 ms
long noamTimer50 = millis(); //our 'timer' variable for sending at 50 ms
long noamTimer3000 = millis(); //our 'timer' variable for sending at 200 ms


public void setup() {
  lemma = new Lemma(this, guestName, roomName);
}
public void draw() {    
  //if it's been more than 200 ms, randomize our data, and send our 200 ms periodic events
  if (checkTimer200()) {
	  
	for (int i = 0; i < 6; i++) {
	    randomizeMoodRingData(); //generate some random variation on the data		
		sendMoodRingMessage(i+1);
	    randomizeSpiritCenterData();
	    lemma.sendEvent(SpiritCenterTopicName+(i+1), spiritCenterData);
		
	};
	
	
  // need to convert colors to strings to send to noam, pulled out into separate function
  }
  if (checkTimer50()) {
  	for (int i = 0; i < 6; i++) {
		randomizeEmotionalQuotientData();
		lemma.sendEvent(EmotionalQuotientTopicName+(i+1), emotionalQuotientData);
  		}
	}
  if (checkTimer3000()) {
  	for (int i = 0; i < 6; i++) {
  		randomizeBrainwaveData();
  		lemma.sendEvent(BrainwaveTopicName+(i+1), brainwaveData);
  	}
  }
  lemma.run();
}

//------------------------------------------------------------------------------------------------//

//has it been 3sec yet?
public boolean checkTimer3000() {
  if ( millis() - noamTimer3000 > 3000 ) {
    noamTimer3000 = millis(); //reset value of noamTimer3000 so condition will be true again 200ms from now 
    return true;
  }
  return false;
}

//has it been 200ms yet?
public boolean checkTimer200() {
  if ( millis() - noamTimer200 > 200 ) {
    noamTimer200 = millis(); //reset value of noamTimer200 so condition will be true again 200ms from now 
    return true;
  }
  return false;
}

//has it been 50ms yet?
public boolean checkTimer50() {
  if ( millis() - noamTimer50 > 50 ) {
    noamTimer50 = millis(); //reset value of noamTimer50 so condition will be true again 50ms from now 
    return true;
  }
  return false;
}

public void sendMoodRingMessage(int j) {
  String[] tempStrArr = new String[10];
  for ( int i=0; i<10; i++) {
    tempStrArr[i] = hex( moodRingData[i] );
  }
  lemma.sendEvent( MoodRingTopicName+j, tempStrArr );
}


//------------------------------------------------------------------------------------------------//
boolean redUp = true;
boolean greenUp = true;
boolean blueUp = true;
boolean xUp = true;
boolean yUp = true;
boolean zUp = true;
boolean emoUp = true;

public void randomizeMoodRingData() {
  int colorVarFactor = 50;
  float curRed, curGreen, curBlue;
  //randomly change all color values, and return true
  for ( int i=0; i<10; i++ ) {
    if (redUp) {     //red walking up
      curRed = red(moodRingData[i]) + random(0, colorVarFactor);      
      if (curRed > 255) { 
        curRed = 255; 
        redUp = false;
      }
    }    
    else { //red walking down
      curRed = red(moodRingData[i]) - random(0, colorVarFactor);            
      if (curRed < 0) { 
        curRed = 0; 
        redUp = true;
      }
    }
    if (greenUp) {     //green walking up
      curGreen = green(moodRingData[i]) + random(0, colorVarFactor);      
      if (curGreen > 255) { 
        curGreen = 255; 
        greenUp = false;
      }
    }    
    else { //green walking down
      curGreen = green(moodRingData[i]) - random(0, colorVarFactor);            
      if (curGreen < 0) { 
        curGreen = 0; 
        greenUp = true;
      }
    }
    if (blueUp) {     //blue walking up
      curBlue = blue(moodRingData[i]) + random(0, colorVarFactor);      
      if (curBlue > 255) { 
        curBlue = 255; 
        blueUp = false;
      }
    }    
    else { //blue walking down
      curBlue = blue(moodRingData[i]) - random(0, colorVarFactor);            
      if (curBlue < 0) { 
        curBlue = 0; 
        blueUp = true;
      }
    }
    moodRingData[i] = color(curRed, curGreen, curBlue);
  }
}

public void randomizeSpiritCenterData() {
  float spiritVarFactor = .05f;
  float curX, curY, curZ;
  //randomly change all color values, and return true  
  if (xUp) {     //X walking up
    curX = spiritCenterData[0] + random(0, spiritVarFactor);      
    if (curX > 1) { 
      curX = 1; 
      xUp = false;
    }
  }    
  else { //X walking down
    curX = spiritCenterData[0] - random(0, spiritVarFactor);            
    if (curX < 0) { 
      curX = 0; 
      xUp = true;
    }
  }
  if (yUp) {     //Y walking up
    curY = spiritCenterData[1] + random(0, spiritVarFactor);      
    if (curY > 1) { 
      curY = 1; 
      yUp = false;
    }
  }    
  else { //Y walking down
    curY = spiritCenterData[1] - random(0, spiritVarFactor);            
    if (curY < 0) { 
      curY = 0; 
      yUp = true;
    }
  }
  if (zUp) {     //Z walking up
    curZ = spiritCenterData[2] + random(0, spiritVarFactor);      
    if (curZ > 1) { 
      curZ = 1; 
      zUp = false;
    }
  }    
  else { //Z walking down
    curZ = spiritCenterData[2] - random(0, spiritVarFactor);            
    if (curZ < 0) { 
      curZ = 0; 
      zUp = true;
    }
  }
  spiritCenterData[0] = curX;
  spiritCenterData[1] = curY;
  spiritCenterData[2] = curZ;
}

public void randomizeEmotionalQuotientData() {
  if (emoUp) {     //emo walking up
    emotionalQuotientData = emotionalQuotientData + random(0, .05f);      
    if (emotionalQuotientData > 1) { 
      emotionalQuotientData = 1; 
      emoUp = false;
    }
  }
  else {     //emo walking down
    emotionalQuotientData = emotionalQuotientData - random(0, .05f);      
    if (emotionalQuotientData < 0) { 
      emotionalQuotientData = 0; 
      emoUp = true;
    }
  }
}

public void randomizeBrainwaveData() {
	String loremIpsum = "Donut halvah jelly-o. Apple pie chocolate cake toffee topping. Gingerbread candy canes dessert fruitcake bonbon cookie. Oat cake tootsie roll chupa chups pastry brownie. Marzipan pastry candy pastry apple pie powder carrot cake gummi bears tart. Sweet roll pastry chupa chups oat cake dessert bonbon. Sesame snaps muffin jelly beans pastry jelly-o. Chocolate cake croissant powder powder chocolate pastry carrot cake jujubes. Chupa chups icing macaroon pudding donut toffee tiramisu cotton candy jelly beans. Brownie topping bonbon lollipop dessert. Muffin croissant tootsie roll lemon drops powder. Powder marshmallow apple pie cookie jelly souffl\u00e9 macaroon. Cheesecake pudding donut fruitcake marshmallow toffee.";
	String[] randomSentences  = loremIpsum.split("[.]");

	brainwaveData = randomSentences[PApplet.parseInt(random(randomSentences.length))];

}

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "--full-screen", "--bgcolor=#666666", "--stop-color=#cccccc", "dataInputGenerator" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
